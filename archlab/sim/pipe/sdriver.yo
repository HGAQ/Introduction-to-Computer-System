                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43005000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f68804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # 刘松瑞 2100011819
                            | # Describe how and why you modified the baseline code.
                            | # 1. 使用iaddq代替addq，避免多余的内存引用
                            | # 2.
                            | #
                            | #
                            | #
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	# irmovq $1, %rcx
                            | 	# irmovq $8, %r8
                            | 	# xorq %rax,%rax		# count = 0;
0x032: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx		# len -	10
0x03c: 6222                 | 	andq %rdx,%rdx		# len <= 10?
0x03e: 710a02000000000000   | 	jle Rest			# goto rest
0x047:                      | Round1:	
0x047: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x051: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x05b: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x065: 62aa                 | 	andq %r10, %r10			# val <= 0....
0x067: 717a00000000000000   | 	jle Round2
0x070: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x07a:                      | Round2:
0x07a: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x084: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x08e: 62bb                 | 	andq %r11, %r11			# val <= 0....
0x090: 71a300000000000000   | 	jle Round3
0x099: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x0a3:                      | Round3:
0x0a3: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x0ad: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0b7: 62aa                 | 	andq %r10, %r10			# val <= 0....
0x0b9: 71cc00000000000000   | 	jle Round4
0x0c2: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x0cc:                      | Round4:
0x0cc: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0d6: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x0e0: 62bb                 | 	andq %r11, %r11			# val <= 0....
0x0e2: 71f500000000000000   | 	jle Round5
0x0eb: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x0f5:                      | Round5:
0x0f5: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
0x0ff: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11
0x109: 62aa                 | 	andq %r10, %r10			# val <= 0....
0x10b: 711e01000000000000   | 	jle Round6
0x114: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x11e:                      | Round6:
0x11e: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)	# ...and store it to dst
0x128: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x132: 62bb                 | 	andq %r11, %r11			# val <= 0....
0x134: 714701000000000000   | 	jle Round7
0x13d: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x147:                      | Round7:
0x147: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x151: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11
0x15b: 62aa                 | 	andq %r10, %r10			# val <= 0....
0x15d: 717001000000000000   | 	jle Round8
0x166: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x170:                      | Round8:
0x170: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)	# ...and store it to dst
0x17a: 50a74000000000000000 | 	mrmovq 64(%rdi), %r10
0x184: 62bb                 | 	andq %r11, %r11			# val <= 0....
0x186: 719901000000000000   | 	jle Round9
0x18f: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x199:                      | Round9:
0x199: 40a64000000000000000 | 	rmmovq %r10, 64(%rsi)	# ...and store it to dst
0x1a3: 50b74800000000000000 | 	mrmovq 72(%rdi), %r11
0x1ad: 62aa                 | 	andq %r10, %r10			# val <= 0....
0x1af: 71c201000000000000   | 	jle Round10
0x1b8: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x1c2:                      | Round10:
0x1c2: 40b64800000000000000 | 	rmmovq %r11, 72(%rsi)	# ...and store it to dst
0x1cc: 62bb                 | 	andq %r11, %r11			# val <= 0....
0x1ce: 71e101000000000000   | 	jle Npos
0x1d7: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x1e1:                      | Npos:	
0x1e1: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx		# len--
0x1eb: c0f75000000000000000 | 	iaddq $80, %rdi		# src++
0x1f5: c0f65000000000000000 | 	iaddq $80, %rsi		# dst++
0x1ff: 6222                 | 	andq %rdx, %rdx		# len > 0?
0x201: 764700000000000000   | 	jg Round1			# if so, goto Round1:
                            | 
0x20a:                      | Rest: 
0x20a: c0f20700000000000000 | 	iaddq $7, %rdx
0x214: 765e02000000000000   | 	jg Big 				#	len - 3 > 0 
0x21d: 722f02000000000000   | 	jl Small 			#	len - 3 < 0
0x226: 73d103000000000000   | 	je Loop3			#	len == 3
0x22f:                      | Small:
0x22f: c0f20200000000000000 | 	iaddq $2, %rdx		#	len - 1  
0x239: 732304000000000000   | 	je Loop1			#	len == 1
0x242: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x24c: 73fa03000000000000   | 	je Loop2 			# 	len == 2
0x255: 705504000000000000   | 	jmp Done				#   len == 0
0x25e:                      | Big:
0x25e: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		#	len - 7 ? 
0x268: 732d03000000000000   | 	je Loop7 			# 	len == 7
0x271: 76a902000000000000   | 	jg Bigbig           #   len == 8,9,10
0x27a:                      | Bigsmall:
0x27a: c0f20100000000000000 | 	iaddq $1, %rdx 		# 	len - 5
0x284: 72a803000000000000   | 	jl Loop4			#   len == 4
0x28d: 737f03000000000000   | 	je Loop5			#	len == 5
0x296: c0f2ffffffffffffffff | 	iaddq $-1, %rdx 		# 	len - 6
0x2a0: 735603000000000000   | 	je Loop6			#	len == 6
0x2a9:                      | Bigbig:
0x2a9: c0f2feffffffffffffff | 	iaddq $-2, %rdx 	# 	len - 9
0x2b3: 720403000000000000   | 	jl Loop8			#	len == 8
0x2bc: 73db02000000000000   | 	je Loop9			#	len == 9
                            | 
                            | 
                            | 
0x2c5:                      | Loop10:
0x2c5: 50a74800000000000000 | 	mrmovq 72(%rdi), %r10
0x2cf: 40a64800000000000000 | 	rmmovq %r10, 72(%rsi)
0x2d9: 62aa                 | 	andq %r10,%r10
0x2db:                      | Loop9:
0x2db: 50a74000000000000000 | 	mrmovq 64(%rdi), %r10
0x2e5: 71f802000000000000   | 	jle Loop9_
0x2ee: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x2f8:                      | Loop9_:
0x2f8: 40a64000000000000000 | 	rmmovq %r10, 64(%rsi)
0x302: 62aa                 | 	andq %r10,%r10
0x304:                      | Loop8:
0x304: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10
0x30e: 712103000000000000   | 	jle Loop8_
0x317: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x321:                      | Loop8_:
0x321: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)
0x32b: 62aa                 | 	andq %r10,%r10
0x32d:                      | Loop7:
0x32d: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x337: 714a03000000000000   | 	jle Loop7_
0x340: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x34a:                      | Loop7_:
0x34a: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x354: 62aa                 | 	andq %r10,%r10
0x356:                      | Loop6:
0x356: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10
0x360: 717303000000000000   | 	jle Loop6_
0x369: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x373:                      | Loop6_:
0x373: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)
0x37d: 62aa                 | 	andq %r10,%r10
0x37f:                      | Loop5:
0x37f: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x389: 719c03000000000000   | 	jle Loop5_
0x392: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x39c:                      | Loop5_:
0x39c: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x3a6: 62aa                 | 	andq %r10,%r10
0x3a8:                      | Loop4:
0x3a8: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x3b2: 71c503000000000000   | 	jle Loop4_
0x3bb: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x3c5:                      | Loop4_:
0x3c5: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x3cf: 62aa                 | 	andq %r10,%r10
0x3d1:                      | Loop3:
0x3d1: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x3db: 71ee03000000000000   | 	jle Loop3_
0x3e4: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x3ee:                      | Loop3_:
0x3ee: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x3f8: 62aa                 | 	andq %r10,%r10
0x3fa:                      | Loop2:
0x3fa: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x404: 711704000000000000   | 	jle Loop2_
0x40d: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x417:                      | Loop2_:
0x417: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
0x421: 62aa                 | 	andq %r10,%r10
0x423:                      | Loop1:
0x423: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x42d: 714004000000000000   | 	jle Loop1_
0x436: c0f00100000000000000 | 	iaddq $1, %rax		# ...count++
0x440:                      | Loop1_:
0x440: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x44a: 62aa                 | 	andq %r10,%r10
0x44c: 715504000000000000   | 	jle Done
                            | 	#iaddq $1, %rax		# ...count++
                            | 
                            | 
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x455:                      | Done:
0x455: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x456:                      | End:
                            | #/* $end ncopy-ys */
0x456:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x458:                      | 	.align 8
0x458:                      | src:
0x458: ffffffffffffffff     | 	.quad -1
0x460: feffffffffffffff     | 	.quad -2
0x468: 0300000000000000     | 	.quad 3
0x470: 0400000000000000     | 	.quad 4
0x478: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x480:                      | 	.align 16
0x480:                      | Predest:
0x480: fadebc0000000000     | 	.quad 0xbcdefa
0x488:                      | dest:
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8:                      | Postdest:
0x4a8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x4b0:                      | .align 8
                            | # Run time stack
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
0x4f0: 0000000000000000     | 	.quad 0
0x4f8: 0000000000000000     | 	.quad 0
0x500: 0000000000000000     | 	.quad 0
0x508: 0000000000000000     | 	.quad 0
0x510: 0000000000000000     | 	.quad 0
0x518: 0000000000000000     | 	.quad 0
0x520: 0000000000000000     | 	.quad 0
0x528: 0000000000000000     | 	.quad 0
                            | 
0x530:                      | Stack:
